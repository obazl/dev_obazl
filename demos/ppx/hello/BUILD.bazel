# $ bazel test ppx/hello
# You can build each target:
# $ bazel build ppx/hello
# $ bazel build ppx/hello:_Hello
# $ bazel build ppx/hello:_ppx.exe
# $ bazel build ppx/hello:_Driver
# $ bazel build ppx/hello:gendriver

# To inspect the result of ppx processing:
# first, run `source tools/aliases`. this defines an alias `bl` you can use to browse the log.
# uncomment the `ppx_print` line below to set output format to text
# then run `bazel clean`, then `bazel build ppx/hello:_Hello --subcommands
# then run `bl` to inspect the command log. search for PpxTransformAction;
# you will see the command, something like:
# bazel-out/darwin-fastbuild/bin/ppx/hello/_hello.sh -dump-ast -o ../bazel-out/darwin-fastbuild/bin/ppx/hello/_obazl_/hello.ml -impl ppx/hello/hello.ml
# the transformed output is the `-o` parameter (without the leading '../').
# see the full ppx command, add '-verbose' to the `opts` attribute of the `ocaml_module` rule.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module"
)

###########
ocaml_test(
    name = "hello",
    main = "test.ml",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//pkg:ounit2",
        ":_Hello"     # the transformed and compiled test code
    ]
)

#############
ocaml_module(
    name = "_Hello",
    src  = "hello.ml",
    # opts = ["-verbose"],  ## to print the expanded ppx transform command, etc.
    ppx  = ":_ppx.exe",
    # ppx_print = "@ppx//print:text", # uncomment to get readable output
    deps = [
        "@opam//pkg:core",      # contains Sexp module
    ]
)

###############
ppx_executable(
    name = "_ppx.exe",
    main = ":_Driver",          # obazl will place this last in the list of deps
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    deps = [
        "@opam//pkg:ppx_sexp_value" # contains handler for `[%sexp ]` extension
    ]
)

###########
ppx_module(
    name = "_Driver",
    src = ":ppxlib_driver.ml",
    visibility = ["//visibility:public"],
    deps = ["@opam//pkg:ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)

