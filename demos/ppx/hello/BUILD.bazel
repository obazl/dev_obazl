# $ bazel test ppx/hello:test

# You can build each target:
# $ bazel build ppx/hello
# $ bazel build ppx/hello:_Hello
# $ bazel build ppx/hello:ppx.exe
# $ bazel build ppx/hello:_Driver
# $ bazel build ppx/hello:gendriver

# To inspect the result of ppx processing:
# first, run `source tools/aliases`. this defines an alias `bl` you can use to browse the log.
# uncomment the `ppx_print` line below to set output format to text
# then run `bazel clean`, then `bazel build ppx/hello:_Hello --subcommands
# then run `bl` to inspect the command log. search for PpxTransformAction;
# you will see the command, something like:
# bazel-out/darwin-fastbuild/bin/ppx/hello/_hello.sh -dump-ast -o ../bazel-out/darwin-fastbuild/bin/ppx/hello/_obazl_/hello.ml -impl ppx/hello/hello.ml
# the transformed output is the `-o` parameter (without the leading '../').
# see the full ppx command, add '-verbose' to the `opts` attribute of the `ocaml_module` rule.

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable")

###########
ocaml_test(
    name = "test",
    main = "_Test",
    timeout = "short"
)

###########
ocaml_module(
    name = "_Test",
    struct = "test.ml",
    opts = ["-w", "-27",  ## Error (warning 27): unused variable test_ctxt.
    ],
    deps = [
        ":_Hello",  # the transformed and compiled test code
        "@ounit2//:ounit2",
    ],
)

#############
ocaml_module(
    name = "_Hello",
    # opts = ["-verbose"],  ## to print the expanded ppx transform command, etc.
    ppx = ":ppx.exe",
    struct = "hello.ml",
    # ppx_print = "@ppx//print:text", # uncomment to get readable output
    deps = [
        "@core//:core",  # contains Sexp module
    ],
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":Ppx_runner",  ## hand-rolled, see below
    deps = [
        "@ppx_sexp_value//:ppx_sexp_value", #contains handler for `[%sexp ]`
    ],
)

###########
ocaml_module(
    name = "Ppx_runner",
    struct = ":ppx_runner.ml",
    visibility = ["//visibility:public"],
    deps = ["@ppxlib//:ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppx_runner.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        ## either of the following will work:
        "echo \"Ppxlib.Driver.standalone ()\" >> \"$@\"",
        # "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
