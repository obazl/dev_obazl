# $ bazel test ppx/adjunct_deps/hello

# You can build each target:
# $ bazel build ppx/adjunct_deps
# $ bazel build ppx/adjunct_deps:_Hello
# $ bazel build ppx/adjunct_deps:_ppx.exe
# $ bazel build ppx/adjunct_deps:_Driver
# $ bazel build ppx/adjunct_deps:gendriver

# To inspect the result of ppx processing:
# first, run `source tools/aliases`. this defines an alias `bl` you can use to browse the log.
# uncomment the `ppx_print` line below to set output format to text
# then run `bazel clean`, then `bazel build ppx/adjunct_deps/hello:_Hello --subcommands
# then run `bl` to inspect the command log. search for PpxTransformAction;
# you will see the command, something like:
# bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_hello.sh -dump-ast -o ../bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_obazl_/hello.ml -impl ppx/adjunct_deps/hello/hello.ml
# the transformed output is the `-o` parameter (without the leading '../').
# see the full ppx command, add '-verbose' to the `opts` attribute of the `ocaml_module` rule.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module"
)

###########
ocaml_test(
    name = "adjunct_deps",
    main = "test.ml",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//pkg:ounit2",
        # "@opam//pkg:ppx_deriving",
        "@opam//pkg:ppx_deriving.ord",
        "@opam//pkg:ppx_deriving.show",
        # ":_Hello"     # the transformed and compiled test code
    ]
)

#############
ocaml_module(
    name = "_Hello",
    src  = "hello.ml",
    opts = [
        ## the ppx injects code (int_of_sexp, Sexp) that depends on these modules.
        ## we can open them on the command line, or in hello.ml.
        ## either way, we must also list the `sexplib` package as
        ## a dependency, either here in 'deps' or in the `adjunct_deps`
        ## attribute of the ppx transformer.
        # "-open", "Sexplib",
        # "-open", "Sexplib.Std",
    ],
    ppx  = ":_ppx.exe",
    ppx_print = "@ppx//print:text", # uncomment to get readable output
    deps = [
        # we could list both or either of these in adjunct_deps of the ppx (below)
        "@opam//pkg:sexplib",
        # "@opam//pkg:ppx_sexp_conv.runtime-lib"
    ]
)

###############
ppx_executable(
    name = "_ppx.exe",
    main = "//ppx/driver",      # obazl will place this last in the list of deps
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    deps = [
        # "@opam//pkg:ppx_deriving",
        "@opam//pkg:ppx_sexp_conv",
    ],
    adjunct_deps = [
        # "@opam//pkg:sexplib", # we could instead put this in deps
                              # attrib of files to be transformed by
                              # this ppx

        # without the following we get: Error: Unbound module Ppx_sexp_conv_lib
        # when we try to compile the output produced by this executable.
        # we could instead list this in `deps` of the files to be transformed by this ppx
        # putting it here saves us the trouble, since this ppx could be used by many modules.
        "@opam//pkg:ppx_sexp_conv.runtime-lib"
    ]
)
