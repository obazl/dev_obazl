# $ bazel test ppx/adjunct_deps

# You can build each target:
# $ bazel build ppx/adjunct_deps
# $ bazel build ppx/adjunct_deps:_Hello
# $ bazel build ppx/adjunct_deps:_ppx.exe
# $ bazel build ppx/adjunct_deps:_Driver
# $ bazel build ppx/adjunct_deps:gendriver

# To inspect the result of ppx processing:
# The easiest thing to do is run `bazel aquery ${TARGET}`, e.g. `bazel aquery ppx/adjunct_deps:_Hello`
# first, run `source tools/aliases`. this defines an alias `bl` you can use to browse the log.
# uncomment the `ppx_print` line below to set output format to text
# then run `bazel clean`, then `bazel build ppx/adjunct_deps/hello:_Hello --subcommands
# then run `bl` to inspect the command log. search for PpxTransformAction;
# you will see the command, something like:
# bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_hello.sh -dump-ast -o ../bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_obazl_/hello.ml -impl ppx/adjunct_deps/hello/hello.ml
# the transformed output is the `-o` parameter (without the leading '../').
# see the full ppx command, add '-verbose' to the `opts` attribute of the `ocaml_module` rule.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module",
)

###########
ocaml_test(
    name = "test",
    main = "test.ml",
    opts = [
        "-w",
        "-27",
    ],  ## Error (warning 27): unused variable test_ctxt.
    deps_opam = [
        "ounit2",
        "ppx_deriving.ord",
        "ppx_deriving.show",
        # "@opam//pkg:ppx_deriving",
        # ":_Hello"     # the transformed and compiled test code
    ],
)

#############
ocaml_module(
    name = "_Hello",
    opts = [
        ## the ppx injects code (int_of_sexp, Sexp) that depends on these modules.
        ## usually these would be opened in the source file, but for demo purposes
        ## we open them on the command line.
        ## either way, we must also list the `sexplib` package that contains them as
        ## a dependency, either here in 'deps' or in the `adjunct_deps`
        ## attribute of the ppx transformer.

        "-open", "Sexplib",
        "-open", "Sexplib.Std",
    ],
    ppx = ":_ppx.exe",
    ppx_print = "@ppx//print:text",  # uncomment to get readable output
    struct = "hello.ml",
    deps_opam = [
        # we list both of these in adjunct_deps of the ppx (below),
        # but we could put them here instead.
        # "sexplib",
        # "ppx_sexp_conv.runtime-lib"
    ],
)

###############
ppx_executable(
    name = "_ppx.exe",
    main = "//ppx/driver",      # obazl will place this last in the list of deps
    # main = "@opam//pkg:ppxlib.runner",
    # main_opam = "ppxlib.runner",
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    deps      = [], ## non-opam deps
    deps_opam = [
        ## without this, we get "Error: Ppxlib.Deriving: 'sexp' is not a supported type deriving generator"
        ## when we try to use this executable to transform hello.ml above.
        "ppx_sexp_conv",
    ],
    ## Use of adjunct deps here is optional. They could also be added
    ## to the compile rules that use this ppx to transform their
    ## sources. Put here, they will be carried along with the
    ## executable and be automatically used wherever it is used. This
    ## obviates the need to manually add these deps to each rule that depends
    ## on this one for ppx transformation.
    deps_adjunct_opam = [
        ## without these we get unbound module errors when we try to use this executable.
        "sexplib",
        "ppx_sexp_conv.runtime-lib",
    ],
)
