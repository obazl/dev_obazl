# $ bazel test ppx/adjunct_deps

# You can build each target:
# $ bazel build ppx/adjunct_deps
# $ bazel build ppx/adjunct_deps:_Hello
# $ bazel build ppx/adjunct_deps:_ppx.exe
# $ bazel build ppx/adjunct_deps:_Driver
# $ bazel build ppx/adjunct_deps:gendriver

# To inspect the result of ppx processing:
# The easiest thing to do is run `bazel aquery ${TARGET}`, e.g. `bazel aquery ppx/adjunct_deps:_Hello`
# first, run `source tools/aliases`. this defines an alias `bl` you can use to browse the log.
# uncomment the `ppx_print` line below to set output format to text
# then run `bazel clean`, then `bazel build ppx/adjunct_deps/hello:_Hello --subcommands
# then run `bl` to inspect the command log. search for PpxTransformAction;
# you will see the command, something like:
# bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_hello.sh -dump-ast -o ../bazel-out/darwin-fastbuild/bin/ppx/adjunct_deps/hello/_obazl_/hello.ml -impl ppx/adjunct_deps/hello/hello.ml
# the transformed output is the `-o` parameter (without the leading '../').
# see the full ppx command, add '-verbose' to the `opts` attribute of the `ocaml_module` rule.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module",
)

###########
ocaml_test(
    name = "test",
    main = "_Test"
)

ocaml_module(
    name   = "_Test",
    struct = "test.ml",
    opts = ["-w","-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//lib/ounit2",
        ":_Hello",     # the transformed and compiled test code
    ],
    ppx = ":_ppx.exe",
    # ppx_print = "@ppx//print:text",  # uncomment to get readable output
)

#############
ocaml_module(
    name = "_Hello",
    opts = [
        ## the ppx injects code (int_of_sexp, Sexp) that depends on
        ## these modules. usually these would be opened in the source
        ## file, but for demo purposes we open them on the command
        ## line. either way, we must also list the `sexplib` package
        ## that contains them as a dependency, either here in 'deps'
        ## or in the `adjunct_deps` attribute of the ppx transformer.
        "-open", "Sexplib",
        "-open", "Sexplib.Std",

    ],
    ppx = ":_ppx.exe",
    # ppx_print = "@ppx//print:text",  # uncomment to get readable output
    struct = "hello.ml",
    deps = [
        # src file contains ref to "Sexp.to_string" so we need to
        # depend on this lib.
        "@opam//lib/sexplib",
    ],
)

###############
ppx_executable(
    name = "_ppx.exe",
    main = "//ppx/driver",      # obazl will place this last in the list of deps
    # main = "@opam//pkg:ppxlib.runner",
    # main_opam = "ppxlib.runner",
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    deps = [
        ## without this, we get "Error: Cannot locate deriver sexp"
        ## when we try to use this ppx executable to transform
        ## hello.ml above, since it contains extension point
        ## "[@@deriving sexp]".
        "@opam//lib/ppx_sexp_conv",

        ## without these, ppx transformation of test.ml fails
        "@opam//lib/ppx_deriving/ord",
        "@opam//lib/ppx_deriving/show",
    ],
    ## Use of adjunct deps here is optional. They could also be added
    ## to the compile rules that use this ppx to transform their
    ## sources. Put here, they will be carried along with the ppx
    ## executable and be automatically used wherever it is used - that
    ## is, propagated as adjunct deps on the files it transforms. this
    ## obviates the need to manually add these deps to each rule that
    ## depends on this one for ppx transformation.
    deps_adjunct = [
        ## without this, compilation of hello.ml will fail with
        ## "Unbound module" errors (unless the source file lists them
        ## as direct deps).
        # "@opam//lib/ppx_sexp_conv/runtime-lib",
        ## HOWEVER: we do not need to list it, because the transitive
        ## closure of the deps includes some adjunct deps, including
        ## this one, as you can see by running
        ##     bazel query "deps(@opam//lib/ppx_sexp_conv)"
    ],
)
