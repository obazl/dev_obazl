# $ bazel test ppx/ppx_optcomp

load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

string_flag( name = "msg", build_setting_default = "hello",
             values = ["hello", "goodbye"])

config_setting( name = "hello", flag_values = { ":msg": "hello" })
config_setting( name = "goodbye", flag_values = { ":msg": "goodbye" })

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module"
)

###########
ocaml_test(
    name = "ppx_optcomp",
    main = "test.ml",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//pkg:ounit2",
        ":_Hello"
    ]
)

#############
ARG = select({
    ":hello": [":genhello"],
    ":goodbye": [":gengoodbye"],
})

ocaml_module(
    name = "_Hello",
    src  = "hello.ml",
    ppx  = ":ppx_optcomp.exe",
    # ppx_data = ARG,
    ppx_data = [
        ":genconfig"
        # ":config.mlh"
    ],  # this is our runtime dep
    ppx_print = "@ppx//print:text",
)

########
## WARNING: due to Bazel restrictions on the way 'select()' can be used, we
## can only select the entire command string here. we cannot use it to
## select a parameter, for example.

## here {...} is for string interpolation, and $@ is the genrule outfile
CMD = "echo \[%%define greeting {cmd}\] > \"$@\""

genrule(
    name = "genconfig",
    outs = ["config.mlh"],
    cmd = select({
    ":hello":    CMD.format(cmd=1),
    ":goodbye":    CMD.format(cmd=2),
    })
  )

###############
ppx_executable(
    name = "ppx_optcomp.exe",
    main = ":Driver",
    deps = ["@opam//pkg:ppx_optcomp"]
)

###########
ppx_module(
    name = "Driver",
    src = ":ppxlib_driver.ml",
    deps = ["@opam//pkg:ppxlib"]
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
