# $ bazel test ppx/ppx_optcomp

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "bool_setting",
     "int_flag", "int_setting")

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module"
)

load(":BUILD.bzl", "demo_config")

bool_flag( name = "colorize", build_setting_default = False )
bool_setting( name = "colorize_enabled", build_setting_default = True )

int_flag( name = "red", build_setting_default = 0 )
int_flag( name = "green", build_setting_default = 0 )
int_flag( name = "blue", build_setting_default = 0 )

demo_config(
    name = "color_config",
    template = "config.ml.template",
    # colorize = ":colorize",
    # red   = ":red",
    # green = ":green",
    # blue  = ":blue"
)

int_setting( name = "red_255", build_setting_default = 255 )
int_setting( name = "green_127", build_setting_default = 127 )
int_setting( name = "blue_80",  build_setting_default = 80 )
demo_config(
    name = "coral",
    template = "config.ml.template",
    colorize = ":colorize_enabled",
    red   = ":red_255",
    green = ":green_127",
    blue  = ":blue_80"
)

int_setting( name = "green_128", build_setting_default = 128 )
int_setting( name = "blue_128",  build_setting_default = 128 )
demo_config(
    name = "teal",
    template = "config.ml.template",
    colorize = ":colorize_enabled",
    # red   = ":red",
    green = ":green_128",
    blue  = ":blue_128"
)

###########
ocaml_test(
    name = "ppx_optcomp",
    main = "test.ml",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//pkg:ounit2",
        ":_Hello"
    ]
)

#############
ARG = select({
    ":hello": [":genhello"],
    ":goodbye": [":gengoodbye"],
})

ocaml_module(
    name = "_Hello",
    src  = "hello.ml",
    ppx  = ":ppx_optcomp.exe",
    # ppx_data = ARG,
    ppx_data = [
        ":genconfig"
        # ":config.mlh"
    ],  # this is our runtime dep
    ppx_print = "@ppx//print:text",
)

########
## WARNING: due to Bazel restrictions on the way 'select()' can be used, we
## can only select the entire command string here. we cannot use it to
## select a parameter, for example.

## here {...} is for string interpolation, and $@ is the genrule outfile
CMD = "echo \[%%define greeting {cmd}\] > \"$@\""

genrule(
    name = "genconfig",
    outs = ["config.mlh"],
    cmd = select({
    ":hello":    CMD.format(cmd=1),
    ":goodbye":    CMD.format(cmd=2),
    })
  )

###############
ppx_executable(
    name = "ppx_optcomp.exe",
    main = ":Driver",
    deps = ["@opam//pkg:ppx_optcomp"]
)

###########
ppx_module(
    name = "Driver",
    src = ":ppxlib_driver.ml",
    deps = ["@opam//pkg:ppxlib"]
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
