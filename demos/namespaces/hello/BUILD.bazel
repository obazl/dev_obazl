# To build the module: $ bazel build minimal/hello_module:Hello
# To run the test:     $ bazel test minimal/hello_module

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns",
    "ocaml_test"
)

ocaml_test(
    name = "test",
    main = "test.ml",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        "@opam//pkg:ounit2",
        ":hello",
        ## Without a library or archive, we must depend on the ns and each submodule:
        # ":_Hello_ns",
        # ":_Australian",
        # ":_English",
        # ":_French",
        # ":_Spanish"
    ]
)

## Since the ns does not depend on the submodules, we use a library to
## aggregate. We could also use an archive:
# ocaml_archive(
ocaml_library(
    name = "hello",
    deps = [
        ":_Australian",
        ":_English",
        ":_French",
        ":_Spanish",
    ],
)

ocaml_ns(
    name = "_Hello_ns",
    ns = "hello",
    ## the ns must depend on source files, not build targets:
    submodules = [
        "australian.ml",  # not ":_Australian"
        "english.ml",
        "french.ml",
        "spanish.ml",
    ],
)

## Each submodule must depend on the ns target 'ns = ":_Hello_ns"'
ocaml_module(
    ns   = ":_Hello_ns",
    name = "_Australian",
    src  = "australian.ml",
)

ocaml_module(
    ns   = ":_Hello_ns",
    name = "_English",
    src  = "english.ml",
)

ocaml_module(
    ns   = ":_Hello_ns",
    name = "_French",
    src  = "french.ml",
)

ocaml_module(
    ns   = ":_Hello_ns",
    name = "_Spanish",
    src  = "spanish.ml",
)

