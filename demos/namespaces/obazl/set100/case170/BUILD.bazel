## set100/case170: multiple ns environments

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
)
load("@obazl_rules_ocaml//ocaml:macros.bzl", "ns_env")

ns_env(
    name = "ns_classic",
    prefix = "classic",
)

ns_env(
    name = "ns_grue",
    prefix = "grue",
)

ocaml_test(
    name = "test",
    deps_opam = ["ounit2"],
    main = "test.ml",
    opts = [
        "-w",
        "-27",
    ],  ## Error (warning 27): unused variable test_ctxt.
    deps = [
        ":_Blue",
        ":_Green",
        ":_Red",
    ],
)

# Without an ns_env attribute, the following targets will still compile,
# yielding red.cmo, green.cmo, and blue.cmo.
# With the attribute, the outputs will be prefixed with
# the prefix specified in the ns env, e.g. Grue__Green

ocaml_module(
    name = "_Red",
    ns_env = ":ns_classic",
    struct = "red.ml",  # => Classic__Red.cmo
)

ocaml_module(
    name = "_Green",
    ns_env = ":ns_grue",
    struct = "green.ml",  # => Grue__Green.cmo
    deps = [":_Blue"],
)

ocaml_module(
    name = "_Blue",
    ns_env = ":ns_grue",
    struct = "blue.ml",  # => Grue__Blue.cmo
)
