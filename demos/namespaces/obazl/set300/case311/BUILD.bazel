## set300/case310

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_test",
)
load("@obazl_rules_ocaml//ocaml:macros.bzl", "ns_env")

# 'ns_env()' is sufficient to initialize the ns eval environment with a
# prefix string, but it does not by default initialize a resolver - for
# that we need to add the 'aliases' attribute, as shown in the demo after this.

ns_env(prefix = "Demo")  ## For readability; no aliases = no ns_env resolver

ocaml_test(
    name = "test",
    deps_opam = ["ounit2"],
    main = "test.ml",
    opts = [
        "-w",
        "-27",
    ],  ## Error (warning 27): unused variable test_ctxt.
    deps = [":color"],
)

# This will generate an ns main module, its submodules, and an archive
# file that contains them.
ocaml_ns_archive(
    name = "color",
    opts = ["-linkall"],
    submodules = {
        ":_Red": "Red",  # equation:  module Red = Demo__Red
        ":_Green": "Green",
        ":_Blue": "Blue",
    },
    visibility = ["//visibility:public"],
)

# Since there are no intramural deps, we do not have to worry about
# e.g. resolving a reference to Blue within Red's code. That would be
# a problem under renaming.  Following demos show how to manage it.

ocaml_module(
    name = "_Red",
    ns_env = ":_ns_env",
    struct = "red.ml",
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "_Green",
    ns_env = ":_ns_env",
    struct = "green.ml",
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "_Blue",
    ns_env = ":_ns_env",
    struct = "blue.ml",
    visibility = ["//visibility:public"],
)
