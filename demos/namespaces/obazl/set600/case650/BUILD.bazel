load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_test",
)
load("@obazl_rules_ocaml//ocaml:macros.bzl", "ns_env")

# here we change the label from ":_ns_resolver" to ":pkg_ns",
# used in the 'ns' attrib of ocaml_module rules below.
ns_env(name = "pkg_ns")

ocaml_test(
    name = "test",
    deps_opam = ["ounit2"],
    main = "test.ml",
    opts = [
        "-w",
        "-27",  ## Error (warning 27): unused variable test_ctxt.
    ],
    deps = [":a"],
)

# How to support articulated module paths like A.B.Color
ocaml_ns_library(
    name = "a",
    # include = "a_footer.ml",
    submodules = {
        # ":foo": "Foo", ## 'regular' submodule
        ":b": "B",  ## ns submodule
    },
)

ocaml_ns_library(
    name = "b",
    includes = [":beta"],
    submodules = {
        ":_Bar": "Bar",  ## 'regular' submodule
        ":color": "Color",  ## ns submodule
    },
)

## This module will be accessible directly as 'Color', or indirectly as 'A.Color'
## But since it has private visibility by default, clients outside of this package
## cannot depend on it directly.
ocaml_ns_library(
    name = "color",
    includes = [":color_include"],
    submodules = {
        ":_Red": "Red",
        ":_Green": "Green",
        ":_Blue": "Blue",
    },
)

ocaml_module(
    name = "beta",
    ns_env = ":pkg_ns",
    struct = "beta.ml",
)

ocaml_module(
    name = "color_include",
    ns_env = ":pkg_ns",
    struct = "color_include.ml",
)

ocaml_module(
    name = "_Red",
    ns_env = ":pkg_ns",
    struct = "red.ml",
)

ocaml_module(
    name = "_Green",
    ns_env = ":pkg_ns",
    struct = "green.ml",
)

ocaml_module(
    name = "_Blue",
    ns_env = ":pkg_ns",
    struct = "blue.ml",
)

ocaml_module(
    name = "_Bar",
    ns_env = ":pkg_ns",
    struct = "bar.ml",
)
