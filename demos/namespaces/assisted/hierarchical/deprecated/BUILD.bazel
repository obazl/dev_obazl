load("@obazl_rules_ocaml//ocaml:build.bzl",
     # macros
     "ocaml_ns_archive_macro",
     "ocaml_submodule_rename",
     # rules
     "ocaml_archive", "ocaml_module",
)

package(default_visibility = ["//visibility:public"])

## Step 1: generate root delegator. derive name from package directory.
ocaml_ns_archive_macro(
    name = "root_delegator",
    # rootseg = "foo",
    delegates = [
        "beta1/gamma/goodbye.ml",
        "beta2/gamma/hello.ml",
        "gamma/howdy.ml",
        "beta1/gamma/hello.ml"
    ],
)

ocaml_submodule_rename(name="rename_easy", prefix="foo_bar", srcs=["easy.ml"])

ocaml_module(
    name = "easy",
    message = "Compiling easy.ml",
    impl = "easy.ml",
    opts = [ "-verbose" ],
)

ocaml_module(
    name = "simple",
    message = "Compiling simple.ml",
    impl = "simple.ml",
    opts = [ "-verbose" ],
)

## this target assembles cmx files into a cmxa file:
ocaml_archive(
    name = "archive_cmx",
    message = "Archiving cmx files...",
    # srcs = ["easy.ml", "simple.ml"],
    opts = [ "-verbose" ],
    deps = [":easy", ":simple"],
    visibility = ["//visibility:public"],
)

## this target compiles sources to an archive:
ocaml_archive(
    name = "archive_ml",
    message = "Archiving...",
    srcs = ["easy.ml", "simple.ml"],
    opts = [ "-verbose" ],
    visibility = ["//visibility:public"],
)

## this target mixes compilation and archiving:
ocaml_archive(
    name = "archive_mix",
    message = "Archiving...",
    srcs = ["easy.ml"],
    opts = [ "-verbose" ],
    deps = [":simple"],
    visibility = ["//visibility:public"],
)

