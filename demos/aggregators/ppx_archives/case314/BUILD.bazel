## aggregators/ppx_archives/case314: two simple (independent) archives

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_archive",
    "ppx_module",
    "ppx_test"
)

# FIXME: use ppx_test? do we need separate test rules?
ocaml_test(
    name = "test",
    main = "_Test"
)

ppx_module(
    name = "_Test",
    struct = "test.ml",
    ppx  = ":ppx.exe",
    opts = ["-w", "-27"],  ## Error (warning 27): unused variable test_ctxt.
    ## NOTE: test.ml does NOT have any ppx _build_ dependencies ('deps'), only
    ## preprocessing deps, which are handled by the ppx_executable passed via
    ## the 'ppx' attribute.
    deps = ["@opam//lib/ounit2"]
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":Runner",
    deps = [
        ":ppx_color", "ppx_greek",
        "@opam//lib/ppxlib"
    ],
    # deps_opam = ["ppxlib"]
)

###########
ppx_module(
    name      = "ppx_color",
    struct    = "ppx_color.ml",
    deps      = [":_Ppx_color"],
    opts      = ["-w", "-33"]   ## unused open
)

############
ppx_archive(
    name = "_Ppx_color",
    modules = [
        ":_Ppx_red",
        ":_Ppx_green",
        ":_Ppx_blue",
    ],
)

ppx_module(
    name      = "_Ppx_red",
    struct    = "ppx_red.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

ppx_module(
    name      = "_Ppx_green",
    struct    = "ppx_green.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

ppx_module(
    name      = "_Ppx_blue",
    struct    = "ppx_blue.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

###########
ppx_module(
    name      = "ppx_greek",
    struct    = "ppx_greek.ml",
    deps      = [":_Ppx_greek"],
    opts      = ["-w", "-33"]   ## unused open
)

############
ppx_archive(
    name = "_Ppx_greek",
    modules = [
        ":_Ppx_alpha",
        ":_Ppx_beta",
        ":_Ppx_gamma",
    ],
)

ppx_module(
    name      = "_Ppx_alpha",
    struct    = "ppx_alpha.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

ppx_module(
    name      = "_Ppx_beta",
    struct    = "ppx_beta.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

ppx_module(
    name      = "_Ppx_gamma",
    struct    = "ppx_gamma.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

################################################################
###########
ppx_module(
    name = "Runner",
    struct = ":ppxlib_runner.ml",
    deps      = ["@opam//lib/ppxlib"]
    # deps_opam = ["ppxlib"]
)

########
genrule(
    name = "genrunner",
    outs = ["ppxlib_runner.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
